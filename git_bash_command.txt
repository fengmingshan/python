git add test.txt	#将工作区做的修改提交到缓存区
git commit -m "git tracks changes" 	#将缓存区的修改提交到仓库 -m后面的内容是对本次修改的注释，建议不要省略，每次都写，以便版本回退时好追溯

git checkout -- test.txt  	#撤销刚才在工作区做的修改
git reset HEAD test.txt 	#撤销已经提交到缓存区的修改

rm test.txt 	#从文件管理器删除文件，删除之后还能从版本库找回来
git rm test.txt 	#彻底从版本删除文件，删除之后就找不回来了
git checkout -- test.txt 	#如果文件管理器误删了文件，从版本库找回来

git log --pretty=oneline	#查看历史commit记录，--pretty=oneline是可选参数表示单行显示简略记录
git reset --hard HEAD^  	#回退到上一个版本。HEAD是版本的指针，HEAD^表示回退到上个版本，HEAD^表示回退到上两个版本，HEAD~100表示回退到上100个版本
git reset --hard 3628164 	#回退到制定的版本号，版本号可以用git log查看，只用写前几位就可以了。
git reflog 		#查看历史修改的版本号

git config --system --list 	#查看gitbush的系统config
git config --global --list 	#查看gitbush当前用户（global）配置
git config --local  --list	#查看gitbush当前仓库配置信息

git config --global core.quotepath false  #在git bash显示中文

ssh-keygen -t rsa -C "fms_python@163.com"  #创建SSH KEY

git remote add origin git@github.com:fengmingshan/python.git   #创建远程库

git push -u origin  master #第一次将本地库push到远程仓库

git push origin  master  #以后将本地库push到远程仓库就不用-u了

git pull --rebase origin master  #将远程库拉下来并合并到本地库

git config --global core.editor="C:/'Program Files'/Notepad++/Notepad++.exe"          #修改gitbush的默认文本编辑器为notepad++

git config --unset --global  core.editor="C:/'Program Files'/Notepad++/Notepad++.exe"      #删除gitbush的默认文本编辑器为

